(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{595:function(t,a,s){"use strict";s.r(a);var v=s(17),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http各个版本的差异"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http各个版本的差异"}},[t._v("#")]),t._v(" HTTP各个版本的差异")]),t._v(" "),s("h2",{attrs:{id:"http1-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-0"}},[t._v("#")]),t._v(" HTTP1.0")]),t._v(" "),s("h3",{attrs:{id:"无法复用连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无法复用连接"}},[t._v("#")]),t._v(" 无法复用连接")]),t._v(" "),s("p",[t._v("HTTP1.0为每个请求单独建立"),s("RouterLink",{attrs:{to:"/frontend/计算机网络/TCP协议.html"}},[t._v("TCP连接")]),t._v("。")],1),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com/img/image-20220604101540054.png",alt:"image-20220604101540054"}}),t._v(" "),s("p",[t._v("由于每个请求都是独立的连接，因此会带来下面的问题：")]),t._v(" "),s("ol",[s("li",[t._v("连接的建立和销毁都会占用服务器和客户端的资源，造成内存资源的浪费")]),t._v(" "),s("li",[t._v("连接的建立和销毁都会消耗时间，造成响应时间的浪费")]),t._v(" "),s("li",[t._v("无法充分利用带宽，造成带宽资源的浪费")])]),t._v(" "),s("blockquote",[s("p",[t._v("TCP协议的特点是「慢启动」，即一开始传输的数据量少，一段时间之后达到传输的峰值。而上面这种做法，会导致大量的请求在TCP达到传输峰值前就被销毁了。")])]),t._v(" "),s("h3",{attrs:{id:"队头阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队头阻塞"}},[t._v("#")]),t._v(" 队头阻塞")]),t._v(" "),s("p",[t._v("HTTP1.0规定下一个请求必须在前一个请求响应到达之后才能发送。")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com/img/image-20220604102453653.png",alt:"image-20220604102453653"}}),t._v(" "),s("h2",{attrs:{id:"http1-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" HTTP1.1")]),t._v(" "),s("h3",{attrs:{id:"长连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#长连接"}},[t._v("#")]),t._v(" 长连接")]),t._v(" "),s("p",[t._v("为了解决HTTP1.0的问题，"),s("strong",[t._v("HTTP1.1默认开启长连接")]),t._v("，即让同一个TCP连接服务于多个请求-响应。")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com/img/image-20220604102724413.png",alt:"image-20220604102724413"}}),t._v(" "),s("p",[t._v("在这种情况下，多次请求响应可以共享同一个TCP连接，这不仅减少了TCP的握手和挥手时间，同时可以充分利用TCP「慢启动」的特点，有效的利用带宽。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("小知识")]),t._v(" "),s("p",[t._v("实际上，在HTTP1.0后期，虽然没有官方标准，但开发者们慢慢形成了一个共识：")]),t._v(" "),s("p",[t._v("只要请求头中包含"),s("code",[t._v("Connection: keep-alive")]),t._v("，就表示客户端希望开启长连接，希望服务器响应后不要关闭TCP连接。如果服务器认可这一行为，即可保持TCP连接。")])]),t._v(" "),s("p",[t._v("我们在开发者工具中Network里可以看到，有相同的"),s("code",[t._v("Connection ID")]),t._v("表示这些请求使用的是同一个TCP连接。")]),t._v(" "),s("p",[t._v("当需要的时候，任何一方都可以关闭TCP连接，关闭的情况主要有三种：")]),t._v(" "),s("ol",[s("li",[t._v("客户端在某一次请求中设置了"),s("code",[t._v("Connection: close")]),t._v("，服务器收到此请求后，响应结束后立即关闭TCP连接")]),t._v(" "),s("li",[t._v("在没有请求时，客户端会不断对服务器进行心跳检测（一般每隔1秒）。一旦心跳检测停止，服务器立即关闭TCP连接")]),t._v(" "),s("li",[t._v("当客户端长时间没有新的请求到达服务器，服务器会主动关闭TCP。运维人员可以设置该时间。")])]),t._v(" "),s("h3",{attrs:{id:"管道化和队头阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#管道化和队头阻塞"}},[t._v("#")]),t._v(" 管道化和队头阻塞")]),t._v(" "),s("p",[t._v("HTTP1.1允许在响应到达之前发送下一个请求，这样可以大幅缩减带宽限制时间")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com/img/image-20220604105403597.png",alt:"image-20220604105403597"}}),t._v(" "),s("p",[t._v("由于多个请求使用的是同一个TCP连接，"),s("strong",[t._v("服务器必须按照请求到达的顺序进行响应")]),t._v("，否则客户端无法知晓服务器的响应对应的是哪个请求。")]),t._v(" "),s("p",[t._v("于是，这就导致了一些后发出的请求，无法在处理完成后响应，产生了等待的时间，而这段时间的带宽可能是空闲的，这就造成了带宽的浪费。")]),t._v(" "),s("p",[t._v("队头阻塞虽然"),s("strong",[t._v("发生在服务器")]),t._v("，但这个问题的根源是客户端无法知晓服务器的响应是针对哪个请求的。")]),t._v(" "),s("p",[t._v("正是由于存在队头阻塞，我们常常使用下面的手段进行优化：")]),t._v(" "),s("ul",[s("li",[t._v("通过减少文件数量，从而减少队头阻塞的几率")]),t._v(" "),s("li",[t._v("通过开辟多个TCP连接，实现真正的、有缺陷的并行传输")])]),t._v(" "),s("p",[t._v("浏览器会根据情况，为打开的页面自动开启TCP连接，对于同一个域名的连接最多6个。如果要突破这个限制，就需要把资源放到不同的域中。")]),t._v(" "),s("p",[s("strong",[t._v("然而，管道化并非一个成功的模型，它带来的队头阻塞造成非常多的问题，所以现代浏览器默认是关闭这种模式的")])]),t._v(" "),s("h2",{attrs:{id:"http2-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" HTTP2.0")]),t._v(" "),s("p",[t._v("HTTP2.0新增了Binary Framing（二进制分帧）。")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com/img/image-20220604112546003.png",alt:"image-20220604112546003"}}),t._v(" "),s("h3",{attrs:{id:"二进制分帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧"}},[t._v("#")]),t._v(" 二进制分帧")]),t._v(" "),s("p",[t._v("HTTP2.0可以允许以更小的单元传输数据，每个传输单元称之为"),s("strong",[t._v("帧")]),t._v("，而每一个请求或响应的完整数据称之为"),s("strong",[t._v("流")]),t._v("，每个流有自己的编号，每个帧会记录所属的流。")]),t._v(" "),s("p",[t._v("比如，服务器连续接到了客户端的两个请求，一个请求JS、一个请求CSS，两个文件如下：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("div",{staticClass:"language-css line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".list")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("最终形成的帧可能如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com/img/image-20220604112936753.png",alt:"image-20220604112936753"}})]),t._v(" "),s("p",[t._v("这样就真正的解决了共享TCP连接时的队头阻塞问题，实现了真正的"),s("strong",[t._v("多路复用")]),t._v("。")]),t._v(" "),s("p",[t._v("不仅如此，由于传输时是以帧为单元传输的，无论是响应还是请求，都可以实现并发处理，即不同的传输可以交替进行。")]),t._v(" "),s("p",[t._v("由于进行了分帧，还可以设置传输优先级。")]),t._v(" "),s("h3",{attrs:{id:"头部压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[t._v("#")]),t._v(" 头部压缩")]),t._v(" "),s("p",[t._v("HTTP2.0之前，所有的消息头都是以字符的形式完整传输的。")]),t._v(" "),s("p",[t._v("可实际上，大部分头部信息都有很多的重复。")]),t._v(" "),s("p",[t._v("为了解决这一问题，HTTP2.0使用头部压缩来减少消息头的体积。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com/img/image-20220604120604118.png",alt:"image-20220604120604118"}})]),t._v(" "),s("p",[t._v("对于两张表都没有的头部，则使用Huffman编码压缩后进行传输，同时添加到动态表中。")]),t._v(" "),s("h3",{attrs:{id:"服务器推"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器推"}},[t._v("#")]),t._v(" 服务器推")]),t._v(" "),s("p",[t._v("HTTP2.0允许在客户端没有主动请求的情况下，服务器预先把资源推送给客户端。")]),t._v(" "),s("p",[t._v("当客户端后续需要请求该资源时，则自动从之前推送的资源中寻找。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("h3",{attrs:{id:"http1-0、http1-1、http2-0的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-0、http1-1、http2-0的区别"}},[t._v("#")]),t._v(" HTTP1.0、HTTP1.1、HTTP2.0的区别：")]),t._v(" "),s("p",[t._v("首先说HTTP1.0")]),t._v(" "),s("p",[t._v("它的特点是每次请求和响应完毕后都会销毁TCP连接，同时规定前一个响应完成后才能发送下一个请求。这样做有两个问题：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("无法复用连接")]),t._v(" "),s("p",[t._v("每次请求都要创建新的TCP连接，完成三次握手和四次挥手，网络利用率低。")])]),t._v(" "),s("li",[s("p",[t._v("队头阻塞")]),t._v(" "),s("p",[t._v("如果前一个请求被某种原因阻塞了，会导致后续请求无法发送。")])])]),t._v(" "),s("p",[t._v("然后是HTTP1.1")]),t._v(" "),s("p",[t._v("HTTP1.1是HTTP1.0的改进版，它做出了以下改进：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("长连接")]),t._v(" "),s("p",[t._v("HTTP1.1允许在请求时增加请求头"),s("code",[t._v("Connection: keep-alive")]),t._v("，这样便允许后续的客户端请求在一段时间内复用之前的TCP连接。")])]),t._v(" "),s("li",[s("p",[t._v("管道化")]),t._v(" "),s("p",[t._v("基于长连接的基础，管道化可以不等第一个请求响应继续发送后面的请求，但响应的顺序还是按照请求的顺序返回。")])]),t._v(" "),s("li",[s("p",[t._v("缓存处理")]),t._v(" "),s("p",[t._v("新增响应头 Cache-Control，用于实现客户端缓存。")])]),t._v(" "),s("li",[s("p",[s("RouterLink",{attrs:{to:"/frontend/计算机网络/断点续传.html"}},[t._v("断点传输")])],1),t._v(" "),s("p",[t._v("在上传/下载资源时，如果资源过大，将其分割为多个部分，分别上传/下载，如果遇到网络故障，可以从已经上传/下载好的地方继续请求，不用从头开始，提高效率")])])]),t._v(" "),s("p",[t._v("最后是HTTP2.0")]),t._v(" "),s("p",[t._v("HTTP2.0进一步优化了传输效率，它主要有以下改进：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("二进制分帧")]),t._v(" "),s("p",[t._v("将传输的消息分为更小的二进制帧，每帧有自己的标识序号，即便被随意打乱也能在另一端正确组装")])]),t._v(" "),s("li",[s("p",[t._v("多路复用")]),t._v(" "),s("p",[t._v("基于二进制分帧，在同一域名下所有访问都是从同一个 tcp 连接中走，并且不再有队头阻塞问题，也无须遵守响应顺序")])]),t._v(" "),s("li",[s("p",[t._v("头部压缩")]),t._v(" "),s("p",[t._v("HTTP2.0通过字典的形式，将头部中的常见信息替换为更少的字符，极大的减少了头部的数据量，从而实现更小的传输量")])]),t._v(" "),s("li",[s("p",[t._v("服务器推")]),t._v(" "),s("p",[t._v("HTTP2.0允许服务器直接推送消息给客户端，无须客户端明确的请求")])])]),t._v(" "),s("h3",{attrs:{id:"为什么http1-1不能实现多路复用-无法解决队头阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么http1-1不能实现多路复用-无法解决队头阻塞"}},[t._v("#")]),t._v(" 为什么HTTP1.1不能实现多路复用/无法解决队头阻塞？")]),t._v(" "),s("p",[t._v("HTTP1.1的传输单元是整个报文，因此接收方必须按顺序接收完所有的内容后才能接收下一个传输单元，否则就会造成混乱。而HTTP2.0的传输单元更小，是一个二进制帧，而且每个帧有针对所属流的编号，这样即便是不同的流交替传输，也可以很容易区分出每个帧是属于哪个流的。")]),t._v(" "),s("h3",{attrs:{id:"简单介绍http2-0的多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单介绍http2-0的多路复用"}},[t._v("#")]),t._v(" 简单介绍HTTP2.0的多路复用")]),t._v(" "),s("p",[t._v("在 HTTP2.0 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。 帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。 多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，接收方可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。")]),t._v(" "),s("h3",{attrs:{id:"http1-1是如何复用-tcp-连接的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-1是如何复用-tcp-连接的"}},[t._v("#")]),t._v(" HTTP1.1是如何复用 tcp 连接的？")]),t._v(" "),s("p",[t._v("客户端请求服务器时，通过请求行告诉服务器使用的协议HTTP1.1，同时在请求头中附带"),s("code",[t._v("Connection: keep-alive")]),t._v("（为保持兼容），告诉服务器这是一个长连接，后续请求可以重复使用这一次的TCP连接。")]),t._v(" "),s("p",[t._v("这样做的好处是减少了三次握手和四次挥手的次数，一定程度上提升了网络利用率。但由于HTTP1.1不支持多路复用，响应顺序必须按照请求顺序抵达客户端，不能真正实现并行传输，因此在HTTP2.0出现之前，实际项目中往往把静态资源，比如图片，分发到不同域名下的资源服务器，以便实现真正的并行传输。")]),t._v(" "),s("Vssue",{attrs:{options:{labels:[t.$page.relativePath.split("/")[0]]},title:t.$page.relativePath.split("/")[1]}})],1)}),[],!1,null,null,null);a.default=_.exports}}]);