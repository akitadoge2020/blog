(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{564:function(t,a,e){"use strict";e.r(a);var v=e(17),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"性能优化概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能优化概述"}},[t._v("#")]),t._v(" 性能优化概述")]),t._v(" "),e("p",[t._v("本章所讲的性能优化主要体现在三个方面：")]),t._v(" "),e("img",{attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com/img/image-20220712092654041.png",alt:"image-20220712092654041"}}),t._v(" "),e("h2",{attrs:{id:"构建性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建性能"}},[t._v("#")]),t._v(" 构建性能")]),t._v(" "),e("p",[t._v("构建性能是指，"),e("strong",[t._v("在开发阶段的构建性能")]),t._v("，而不是生产环境的构建性能。")]),t._v(" "),e("p",[t._v("优化的目标，"),e("strong",[t._v("是降低从打包开始，到代码效果呈现所经过的时间")]),t._v("。")]),t._v(" "),e("p",[t._v("构建性能会影响开发效率。构建性能越高，开发过程中时间的浪费越少。")]),t._v(" "),e("p",[t._v("常用的构建性能优化方法：")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/frontend/webpack/构建性能-减少模块解析.html"}},[t._v("减少模块解析")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/frontend/webpack/构建性能-优化loader性能.html"}},[t._v("优化loader性能")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/frontend/webpack/构建性能-热替换.html"}},[t._v("热替换")])],1)]),t._v(" "),e("h2",{attrs:{id:"传输性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传输性能"}},[t._v("#")]),t._v(" 传输性能")]),t._v(" "),e("p",[t._v("传输性能是指，打包后的JS代码传输到浏览器经过的时间。")]),t._v(" "),e("p",[t._v("在优化传输性能时要考虑到：")]),t._v(" "),e("ol",[e("li",[t._v("总传输量：所有需要传输的JS文件的内容加起来，就是总传输量，重复代码越少，总传输量越少")]),t._v(" "),e("li",[t._v("文件数量：当访问页面时，需要传输的JS文件数量，文件数量越多，http请求越多，响应速度越慢")]),t._v(" "),e("li",[t._v("浏览器缓存：JS文件会被浏览器缓存，被缓存的文件不会再进行传输")])]),t._v(" "),e("p",[t._v("常用的传输性能优化方法：")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/frontend/webpack/传输性能-分包.html"}},[t._v("分包")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/frontend/webpack/传输性能-代码压缩.html"}},[t._v("代码压缩")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/frontend/webpack/传输性能-treeshaking.html"}},[t._v("tree shaking")])],1)]),t._v(" "),e("h2",{attrs:{id:"运行性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行性能"}},[t._v("#")]),t._v(" 运行性能")]),t._v(" "),e("p",[t._v("运行性能是指，JS代码在浏览器端的运行速度。")]),t._v(" "),e("p",[t._v("它主要取决于我们如何书写高性能的代码。")]),t._v(" "),e("p",[e("strong",[t._v("永远不要过早的关注于性能")]),t._v("，因为你在开发的时候，无法完全预知最终的运行性能，过早的关注性能会极大的降低开发效率。")]),t._v(" "),e("h2",{attrs:{id:"最后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),e("p",[t._v("性能优化主要从上面三个维度入手。")]),t._v(" "),e("p",[e("strong",[t._v("性能优化没有完美的解决方案，需要具体情况具体分析。")])]),t._v(" "),e("Vssue",{attrs:{options:{labels:[t.$page.relativePath.split("/")[0]]},title:t.$page.relativePath.split("/")[1]}})],1)}),[],!1,null,null,null);a.default=r.exports}}]);