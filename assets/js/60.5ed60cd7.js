(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{529:function(t,s,a){"use strict";a.r(s);var n=a(17),v=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),a("h2",{attrs:{id:"执行上下文的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的概念"}},[t._v("#")]),t._v(" 执行上下文的概念")]),t._v(" "),a("p",[t._v("执行上下文，也可以称为执行环境，其实就是 JavaScript 代码在运行前，创建的一块内存空间，其中包含了代码运行所需要的内容。这个过程，我们称为预编译。")]),t._v(" "),a("p",[t._v("JavaScript 执行上下文分为三种：")]),t._v(" "),a("ul",[a("li",[t._v("全局执行上下文，它是为运行代码主体而创建的执行上下文，也就是说它是为那些存在于函数之外的所有代码而创建的")]),t._v(" "),a("li",[t._v("函数执行上下文，每个函数在执行的时候都会创建自己的执行上下文")]),t._v(" "),a("li",[t._v("eval 函数执行上下文（不推荐使用），使用 eval 函数也会创建一个新的执行上下文")])]),t._v(" "),a("h2",{attrs:{id:"创建执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建执行上下文"}},[t._v("#")]),t._v(" 创建执行上下文")]),t._v(" "),a("p",[t._v("JavaScript 代码运行时，首先会进入全局环境，对应的会创建全局执行上下文。而代码中基本都会存在函数，只要调用一次函数，就会创建一个该函数的执行上下文。")]),t._v(" "),a("p",[t._v("创建执行上下文的步骤如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("确定 "),a("RouterLink",{attrs:{to:"/frontend/JavaScript/this对象.html"}},[t._v("this")]),t._v(" 指向")],1),t._v(" "),a("ul",[a("li",[t._v("在全局执行上下文中，this 指向 window 对象")]),t._v(" "),a("li",[t._v("在函数执行上下文中，this 指向 window 对象")]),t._v(" "),a("li",[t._v("在对象中调用函数，this指向该对象")]),t._v(" "),a("li",[t._v("使用new关键字调用函数，this指向对象实例")])])]),t._v(" "),a("li",[a("p",[t._v("创建变量对象（Variable Object）")]),t._v(" "),a("ul",[a("li",[t._v("确定函数的形参值和特殊变量"),a("code",[t._v("arguments")])]),t._v(" "),a("li",[t._v("确定普通字面量形式的函数声明")]),t._v(" "),a("li",[t._v("确定变量声明、函数表达式声明")])])])]),t._v(" "),a("h2",{attrs:{id:"执行栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),a("p",[t._v("在 JavaScript 中，通过栈的存取方式来管理执行上下文，我们称之为执行栈（Call Stack）。")]),t._v(" "),a("p",[t._v("栈遵循"),a("strong",[t._v("先进后出，后进先出")]),t._v("的规则，也称为 LIFO（Last In First Out）规则。")]),t._v(" "),a("p",[t._v("接下来我们来分析 JavaScript 中如何通过栈来管理通过执行上下文：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("代码执行进入一个执行环境时，它的执行上下文就会被创建，并被推入执行栈中（入栈）")])]),t._v(" "),a("li",[a("p",[t._v("代码执行完成时，它的执行上下文就会被销毁，并从栈顶被推出（出栈），控制权交由下一个执行上下文")])])]),t._v(" "),a("p",[t._v("因为 JavaScript 在执行代码时最先进入全局环境，所以"),a("strong",[t._v("处于栈底的永远是全局环境的执行上下文")]),t._v("。而处于"),a("strong",[t._v("栈顶的是当前正在执行函数的执行上下文")]),t._v("。")]),t._v(" "),a("p",[t._v("当函数调用完成后，它就会从栈顶被推出，理想的情况下，闭包会阻止该操作。")]),t._v(" "),a("p",[t._v("而全局环境只有一个，对应的全局执行上下文也只有一个，只有当页面被关闭之后它才会从执行栈中被推出，否则一直存在于栈底。")]),t._v(" "),a("p",[t._v("下面我们来看一段具体的代码示例：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        \n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("对应图解如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://penguinbucket.obs.cn-southwest-2.myhuaweicloud.com//img/202208191723630.png",alt:"image-20220819172344575"}})]),t._v(" "),a("p",[t._v("执行上下文可存在多个，虽然没有明确的数量限制，但如果超出栈分配的空间，会造成堆栈溢出。常见于递归调用，没有终止条件造成死循环的场景。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归调用自身")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错： Uncaught RangeError: Maximum call stack size exceeded")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("执行上下文，其实就是 JavaScript 代码在运行前，创建的一块内存空间，其中包含了代码运行所需要的内容。")]),t._v(" "),a("p",[t._v("JavaScript 执行上下文分为三种：")]),t._v(" "),a("ul",[a("li",[t._v("全局执行上下文，它是为运行代码主体而创建的执行上下文，也就是说它是为那些存在于函数之外的所有代码而创建的")]),t._v(" "),a("li",[t._v("函数执行上下文，每个函数在执行的时候都会创建自己的执行上下文")]),t._v(" "),a("li",[t._v("eval 函数执行上下文（不推荐使用），使用 eval 函数也会创建一个新的执行上下文")])]),t._v(" "),a("p",[t._v("JavaScript 代码运行时，进入全局环境或调用函数时，都会创建对应的执行上下文。")]),t._v(" "),a("p",[t._v("创建执行上下文的步骤如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("确定 "),a("RouterLink",{attrs:{to:"/frontend/JavaScript/this对象.html"}},[t._v("this")]),t._v(" 指向")],1),t._v(" "),a("ul",[a("li",[t._v("在全局执行上下文中，this 指向 window 对象")]),t._v(" "),a("li",[t._v("在函数执行上下文中，this 指向 window 对象")]),t._v(" "),a("li",[t._v("在对象中调用函数，this 指向该对象")]),t._v(" "),a("li",[t._v("使用 new 关键字调用函数，this 指向对象实例")])])]),t._v(" "),a("li",[a("p",[t._v("创建变量对象（Variable Object）")]),t._v(" "),a("ul",[a("li",[t._v("确定函数的形参值和特殊变量"),a("code",[t._v("arguments")])]),t._v(" "),a("li",[t._v("确定普通字面量形式的函数声明")]),t._v(" "),a("li",[t._v("确定变量声明、函数表达式声明")])])])]),t._v(" "),a("p",[t._v("JavaScript 通过执行栈来管理执行上下文，栈的特点是"),a("strong",[t._v("先进后出，后进先出")]),t._v("。")]),t._v(" "),a("p",[t._v("这代表着全局执行上下文始终在栈底，当前正在执行函数的函数执行上下文始终在栈顶，函数执行完毕后，就会从栈顶被推出。")]),t._v(" "),a("Vssue",{attrs:{options:{labels:[t.$page.relativePath.split("/")[0]]},title:t.$page.relativePath.split("/")[1]}})],1)}),[],!1,null,null,null);s.default=v.exports}}]);