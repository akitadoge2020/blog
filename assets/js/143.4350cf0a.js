(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{611:function(t,a,s){"use strict";s.r(a);var r=s(17),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("h2",{attrs:{id:"什么是设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是设计模式"}},[t._v("#")]),t._v(" 什么是设计模式？")]),t._v(" "),s("p",[t._v("设计模式是（design pattern）是一套被反复使用，多数人知晓的，经过分类的，代码设计经验的总结。")]),t._v(" "),s("h2",{attrs:{id:"使用设计模式的目的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用设计模式的目的"}},[t._v("#")]),t._v(" "),s("strong",[t._v("使用设计模式的目的")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("降低代码的耦合以及代码的开发维护扩展成本")])]),t._v(" "),s("li",[s("p",[t._v("增加复用性")])]),t._v(" "),s("li",[s("p",[t._v("使代码真正工程化")])])]),t._v(" "),s("h2",{attrs:{id:"使用设计模式的六大原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用设计模式的六大原则"}},[t._v("#")]),t._v(" 使用设计模式的六大原则")]),t._v(" "),s("h3",{attrs:{id:"一、单一职责原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、单一职责原则"}},[t._v("#")]),t._v(" 一、单一职责原则")]),t._v(" "),s("p",[t._v("一个方法只做一件事，如请求数据的函数就不要渲染数据。")]),t._v(" "),s("h3",{attrs:{id:"二、开闭原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、开闭原则"}},[t._v("#")]),t._v(" 二、开闭原则")]),t._v(" "),s("p",[t._v("一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。核心是专注于扩展。")]),t._v(" "),s("p",[t._v("面向扩展开放，面向修改关闭，如"),s("code",[t._v("jquery.extend")]),t._v("，提高代码的复用性。")]),t._v(" "),s("h3",{attrs:{id:"三、里氏代换原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、里氏代换原则"}},[t._v("#")]),t._v(" 三、里氏代换原则")]),t._v(" "),s("p",[t._v("任何基类可以出现的地方，子类一定可以出现。通俗的说，子类可以扩展父类的功能，但不能改变父类原有的功能。")]),t._v(" "),s("h3",{attrs:{id:"四、迪米特法则-最小知道原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、迪米特法则-最小知道原则"}},[t._v("#")]),t._v(" 四、迪米特法则（最小知道原则）")]),t._v(" "),s("p",[t._v("一个接口和一个方法，传入的参数越少越好。降低耦合度的同时也会降低复杂度。形成的关联越少越好。")]),t._v(" "),s("h3",{attrs:{id:"五、依赖倒置原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、依赖倒置原则"}},[t._v("#")]),t._v(" 五、依赖倒置原则")]),t._v(" "),s("p",[t._v("最常用的原则，依赖接口，不依赖方法，底层的东西不用了解，我们只需要知道表现即可。降低耦合度。")]),t._v(" "),s("h3",{attrs:{id:"六、接口分离原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、接口分离原则"}},[t._v("#")]),t._v(" 六、接口分离原则")]),t._v(" "),s("p",[t._v("把大接口拆分成小接口，不能一个接口实现增删改查。")]),t._v(" "),s("Vssue",{attrs:{options:{labels:[t.$page.relativePath.split("/")[0]]},title:t.$page.relativePath.split("/")[1]}})],1)}),[],!1,null,null,null);a.default=e.exports}}]);